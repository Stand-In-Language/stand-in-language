-- File for small illustrative telomare programs and for testing

-- Hello World example.
-- main = \input -> ("Hello, World!", 0)

-- -- refinement fail
-- main : (\x -> if x then "fail" else 0) = 1

-- Ad hoc user defined types example:
-- MyInt = let wrapper = \h -> ( \i -> if not i
--                                     then abort "MyInt cannot be 0"
--                                     else  i
--                             , \i -> if dEqual (left i) h
--                                     then 0
--                                     else abort "Not a MyInt"
--                             )
--         in wrapper (# wrapper)
-- main = \i -> ((left MyInt) 8, 0)

-- Case example
main =
  -- let toCase = ("hello",("bla","A string!"))
  -- let toCase = (0,(1,"A string!"))
  let toCase = (0,(1,2))
  -- let toCase = (1,(2,3))
  -- let toCase = (0, "please")
  -- let toCase = (0,(1,3))
  -- let toCase = (0,(1,4))
  -- let toCase = (0,(0,0))
  -- let toCase = 0
      caseTest =
        case toCase of
          -- (0,(1,"A string!")) -> "Success just string"
          -- (0,(1,3)) -> "Failure"
          -- -- (0,x) -> "Success 0"
          -- -- (0,x) -> concat [x, " success"]
          -- (0,(8,2)) -> "success 2"
          -- (0,(8,x)) -> concat [x, " success"]
          -- (0,(1,2)) -> "Success"
          -- (0,(0,0)) -> "weird"
          -- -- ("hello",(3,x)) -> concat [x, " success with var"]
          -- -- ("hello",(1,x)) -> concat [x, " success with var : )"]
          -- 0 -> "not weird"
          -- ("hello",("baz","A string!")) -> "just strings 2"
          -- ("hello",("bla","A string!")) -> "just strings"

          (0,(1,2)) -> "Failure"
          (0,(1,3)) -> "Success"

  in \input -> (caseTest, 0)
