-- File for small illustrative telomare programs and for testing

-- Hello World example.
-- main = \input -> (map (\c -> succ c) "Hello, World!", 0)
main = \input -> (map succ [66], 0)

-- -- refinement fail
-- main : (\x -> if x then "fail" else 0) = 1

-- Ad hoc user defined types example:

-- MyInt = let wrapper = \h -> ( \i -> if not i
--                                     then abort "MyInt cannot be 0"
--                                     else  i
--                             , \i -> if dEqual (left i) h
--                                     then 0
--                                     else abort "Not a MyInt"
--                             )
--         in wrapper (# wrapper)
-- aux = \x -> if dEqual x 8 then "Success" else "Failure"
-- main = \i -> (aux ((left MyInt) 8), 0)

-- Case example
-- main =
--   let toCase = (("a string", 99),(8,"pattern-match"))
--       caseTest =
--         case toCase of
--           (0,(8,2)) -> "Failure 1"
--           ("a string",(8,x)) -> concat [x, " failure 2"]
--           (("a string", 99),(8,x)) -> concat [x, " success with ints, strings and variables"]
--   in \input -> (caseTest, 0)
